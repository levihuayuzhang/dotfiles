# https://clangd.llvm.org/config
# On Mac: ~/Library/Preferences/clangd/config.yaml
# On Linux: ~/.config/clangd/config.yaml
# user config (this) > inner project config > outer project config

# Apply this config conditionally to all C files
# If:
#   PathMatch: .*\.(c|h)$
# CompileFlags:
#   # Compiler: gcc
#   Compiler: clang
#

# ---
# Apply this config conditionally to all C++ files
# If:
#   PathMatch: .*\.(c|h)pp
# CompileFlags:
#   # Compiler: /usr/bin/g++
#   Compiler: clang++

---
# https://docs.nvidia.com/cutlass/media/docs/cpp/ide_setup.html#global-config
If:
  PathMatch: .*\.cuh?
  # PathMatch: .*\.c(c|u|uh)$
CompileFlags:
  # Compiler: /usr/local/cuda/bin/nvcc
  # Compiler: /opt/cuda/bin/nvcc
  # Compiler: /opt/nvidia/hpc_sdk/Linux_x86_64/2025/cuda/bin/nvcc
  Compiler: nvcc
  # not using compile_commands.json for configuring the CUDA projects
  # so may avoid compiler flags from nvcc that not recognized by clang
  # manually add include paths and other flags into project's .clangd config instead
  CompilationDatabase: None
  # preprocessor vars like -D__CUDACC_VER_MAJOR__ , -D__CUDA_ARCH__ may are
  # the key settings (configure them according to the target architecture).
  Add:
    - "-xcuda"
    # - --cuda-path=/usr/local/cuda
    # - -I/usr/local/cuda/include
    # for arch linux
    - "--cuda-path=/opt/cuda"
    - "-I/opt/cuda/include"
    # - "-L/opt/cuda/lib64"
    # - "-std=c++20"
    - --std=c++17
    # - "--no-cuda-version-check"
    - --cuda-gpu-arch=sm_90a
    - "-D__CUDACC__"
    - "-D__INTELLISENSE__"
    - "-D__CLANGD__"
    - "-DCUDA_12_0_SM90_FEATURES_SUPPORTED"
    - "-DCUTLASS_ARCH_MMA_SM90_SUPPORTED=1"
    - "-D_LIBCUDACXX_STD_VER=12"
    - "-D__CUDACC_VER_MAJOR__=12"
    - "-D__CUDACC_VER_MINOR__=3"
    - "-D__CUDA_ARCH__=900"
    - "-D__CUDA_ARCH_FEAT_SM90_ALL"
    - "-Wno-invalid-constexpr"
    # - "-Wno-unknown-warning-option"
    # - "-LC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\lib\x64"
    # - "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include"
    # report all errors
    - "-ferror-limit=0"
  Remove:
    # strip CUDA fatbin args
    - "-Xfatbin*"
    # strip CUDA arch flags
    - "-gencode*"
    - "--generate-code*"
    # strip CUDA flags unknown to clang
    - "-ccbin*"
    - "--compiler-options*"
    - "--expt-extended-lambda"
    - "--expt-relaxed-constexpr"
    - "-forward-unknown-to-host-compiler"
    - "-Werror=cross-execution-space-call"
Diagnostics:
  Suppress:
    - "variadic_device_fn"
    - "attributes_not_allowed"
  ClangTidy:
    Remove:
      - "*"

# ---
# If:
#   PathMatch: /opt/homebrew/opt/llvm/.*
# Diagnostics:
#   Suppress:
#     - '*'

---
# all files
CompileFlags:
  Add:
  [
    -ferror-limit=0,
    -Wall
  ]
  Remove:
    # gcc/g++
    - -fanalyzer
    - -fstack-usage
    - -fdiagnostics-color=always
    - -fstack-protector-strong
    - -fopenmp
    - -fcf-protection
    - -fmodules-ts
    - -fmodule-mapper=*
    - -fdeps-format=*
    - -Wduplicated-cond
    - -Wduplicated-branches
    - -Wlogical-op
    - -Wsuggest-attribute=pure
    - -Wsuggest-attribute=const
    - -Wsuggest-attribute=noreturn
    - -Wsuggest-attribute=format
    - -Wuseless-cast
    - -Wvector-operation-performance
    - -Wzero-as-null-pointer-constant
    - -Wno-stringop-overflow
    - -Wno-psabi
    # nvcc
    - "-ccbin*"
    - "-Xfatbin*"
    - "-Xptxas*"
    - "-Xcompiler=*"
    - "-gencode*"
    - "--generate-code*"
    - "-expt-*"
    - "--expt-*"
    - "--compiler-options*"
    - "--expt-extended-lambda"
    - "--expt-relaxed-constexpr"
    - "-forward-unknown-to-host-compiler"
    - "-Werror=cross-execution-space-call"
    - "-rdc=*"
    - "-mno-*"
    - "-arch=*"
    - "-maxrragcount=*"
    - "-compress-all"
    - "-fvisibility=*"
    - "--extended-lambda"
Index:
  Background: Build
  StandardLibrary: true
Hover:
  ShowAKA: true
InlayHints:
  Enabled: true
  # ParameterNames: true
  # DeducedTypes: true
  # Designators: true
  # BlockEnd: true
  # DefaultArguments: true
  # TypeNameLimit: 0
Completion:
  AllScopes: true
  ArgumentLists: FullPlaceholders
  HeaderInsertion: IWYU
  CodePatterns: All
Diagnostics:
  UnusedIncludes: Strict
  # MissingIncludes: Strict
  Suppress:
    - "variadic_device_fn"
    - "attributes_not_allowed"
  ClangTidy:
    # Add:
    #   - "bugprone-*"
    #   - "concurrency-*"
    #   - "performance-*"
    #   - "portability-*"
    #   - "readability-*"
    #   - "clang-analyzer-*"
    #   - "cppcoreguidelines-*"
    #   - "hicpp-*"
    #   - "cert-*"
    #   - "modernize-*"
    #   - "boost-*"
    #   - "mpi-*"
    #   - "openmp-*"
    #   - "altera-*"
    #   - "abseil-*"
    #   - "linuxkernel-*"
    #   - "google-*"
    #   - "llvm-*"
    #   - "llvmlibc-*"
    #   - "misc-*"
    # Remove:
    #   - "modernize-use-trailing-return-type"
    # CheckOptions:
    #   readability-identifier-naming.VariableCase: CamelCase
    FastCheckFilter: None

